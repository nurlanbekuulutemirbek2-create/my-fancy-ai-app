"use client"

import { useState } from "react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Badge } from "@/components/ui/badge"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Switch } from "@/components/ui/switch"
import { Label } from "@/components/ui/label"
import {
  Youtube,
  Search,
  Play,
  Pause,
  Volume2,
  Maximize,
  Eye,
  EyeOff,
  Sparkles,
  List,
  Clock,
  ThumbsUp,
  Share,
  Bookmark,
} from "lucide-react"

interface Video {
  id: string
  title: string
  channel: string
  duration: string
  views: string
  thumbnail: string
  description: string
  aiSummary?: string
}

interface Playlist {
  id: string
  name: string
  videos: Video[]
  autoGenerated?: boolean
}

export function YouTubeExplorer() {
  const [searchQuery, setSearchQuery] = useState("")
  const [focusMode, setFocusMode] = useState(false)
  const [selectedVideo, setSelectedVideo] = useState<Video | null>(null)
  const [isPlaying, setIsPlaying] = useState(false)
  const [activeTab, setActiveTab] = useState("search")

  // Mock data
  const [searchResults] = useState<Video[]>([
    {
      id: "1",
      title: "How AI is Changing Creative Industries",
      channel: "TechTalks",
      duration: "12:34",
      views: "1.2M views",
      thumbnail: "/ai-presentation.png",
      description: "Exploring the impact of artificial intelligence on creative fields...",
      aiSummary:
        "This video discusses how AI tools are revolutionizing creative industries, covering image generation, music composition, and writing assistance. Key points include democratization of creative tools and new collaboration opportunities.",
    },
    {
      id: "2",
      title: "Digital Art Techniques for Beginners",
      channel: "ArtMaster",
      duration: "8:45",
      views: "856K views",
      thumbnail: "/digital-art-tutorial-colorful.jpg",
      description: "Learn essential digital art techniques from scratch...",
      aiSummary:
        "A comprehensive beginner's guide to digital art covering basic tools, color theory, and composition techniques. Perfect for those starting their digital art journey.",
    },
    {
      id: "3",
      title: "Voice Recording Tips for Content Creators",
      channel: "CreatorHub",
      duration: "15:22",
      views: "432K views",
      thumbnail: "/microphone-recording-studio-setup.jpg",
      description: "Professional voice recording techniques and equipment recommendations...",
      aiSummary:
        "Covers microphone selection, room acoustics, recording software, and post-processing techniques for high-quality voice recordings.",
    },
  ])

  const [playlists] = useState<Playlist[]>([
    {
      id: "1",
      name: "AI & Creativity",
      videos: [searchResults[0], searchResults[1]],
      autoGenerated: true,
    },
    {
      id: "2",
      name: "Learning Resources",
      videos: [searchResults[1], searchResults[2]],
      autoGenerated: false,
    },
  ])

  const handleSearch = () => {
    // In real app, this would call YouTube API
    console.log("Searching for:", searchQuery)
  }

  const playVideo = (video: Video) => {
    setSelectedVideo(video)
    setIsPlaying(true)
  }

  const togglePlayback = () => {
    setIsPlaying(!isPlaying)
  }

  return (
    <div className="h-full space-y-6">
      {/* Header Controls */}
      <Card>
        <CardHeader>
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-3">
              <div className="w-10 h-10 bg-gradient-to-br from-red-500 to-red-600 rounded-lg flex items-center justify-center">
                <Youtube className="h-5 w-5 text-white" />
              </div>
              <div>
                <CardTitle className="flex items-center gap-2">
                  Video Explorer
                  <Sparkles className="h-4 w-4 text-red-500 animate-pulse-soft" />
                </CardTitle>
                <CardDescription>YouTube with AI superpowers</CardDescription>
              </div>
            </div>
            <div className="flex items-center space-x-4">
              <div className="flex items-center space-x-2">
                <Switch id="focus-mode" checked={focusMode} onCheckedChange={setFocusMode} />
                <Label htmlFor="focus-mode" className="flex items-center gap-2">
                  {focusMode ? <EyeOff className="h-4 w-4" /> : <Eye className="h-4 w-4" />}
                  Focus Mode
                </Label>
              </div>
            </div>
          </div>
        </CardHeader>
        <CardContent>
          <div className="flex gap-2">
            <Input
              placeholder="Search for videos..."
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
              onKeyPress={(e) => e.key === "Enter" && handleSearch()}
              className="rounded-lg"
            />
            <Button onClick={handleSearch} className="rounded-lg hover:scale-105 transition-transform">
              <Search className="h-4 w-4 mr-2" />
              Search
            </Button>
          </div>
        </CardContent>
      </Card>

      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        {/* Video Player */}
        {selectedVideo && (
          <div className="lg:col-span-2">
            <Card className="overflow-hidden">
              <div className="relative aspect-video bg-black">
                <img
                  src={selectedVideo.thumbnail || "/placeholder.svg"}
                  alt={selectedVideo.title}
                  className="w-full h-full object-cover"
                />
                <div className="absolute inset-0 bg-black/20 flex items-center justify-center">
                  <Button
                    size="lg"
                    onClick={togglePlayback}
                    className="rounded-full w-16 h-16 hover:scale-110 transition-transform"
                  >
                    {isPlaying ? <Pause className="h-8 w-8" /> : <Play className="h-8 w-8" />}
                  </Button>
                </div>
                {!focusMode && (
                  <div className="absolute bottom-4 left-4 right-4 flex items-center justify-between">
                    <div className="flex items-center gap-2">
                      <Button size="sm" variant="secondary" className="rounded-lg">
                        <Volume2 className="h-4 w-4" />
                      </Button>
                      <span className="text-white text-sm">{selectedVideo.duration}</span>
                    </div>
                    <Button size="sm" variant="secondary" className="rounded-lg">
                      <Maximize className="h-4 w-4" />
                    </Button>
                  </div>
                )}
              </div>
              <CardContent className="p-4">
                <h3 className="font-semibold text-lg mb-2">{selectedVideo.title}</h3>
                <div className="flex items-center justify-between mb-4">
                  <div>
                    <p className="text-sm text-muted-foreground">{selectedVideo.channel}</p>
                    <p className="text-xs text-muted-foreground">{selectedVideo.views}</p>
                  </div>
                  {!focusMode && (
                    <div className="flex gap-2">
                      <Button size="sm" variant="outline" className="rounded-lg bg-transparent">
                        <ThumbsUp className="h-4 w-4 mr-1" />
                        Like
                      </Button>
                      <Button size="sm" variant="outline" className="rounded-lg bg-transparent">
                        <Share className="h-4 w-4 mr-1" />
                        Share
                      </Button>
                      <Button size="sm" variant="outline" className="rounded-lg bg-transparent">
                        <Bookmark className="h-4 w-4 mr-1" />
                        Save
                      </Button>
                    </div>
                  )}
                </div>

                {selectedVideo.aiSummary && (
                  <Card className="bg-gradient-to-r from-primary/10 to-secondary/10 border-primary/20">
                    <CardContent className="p-4">
                      <div className="flex items-center gap-2 mb-2">
                        <Sparkles className="h-4 w-4 text-primary" />
                        <span className="font-semibold text-sm">AI Summary</span>
                      </div>
                      <p className="text-sm text-muted-foreground">{selectedVideo.aiSummary}</p>
                    </CardContent>
                  </Card>
                )}
              </CardContent>
            </Card>
          </div>
        )}

        {/* Sidebar */}
        <div className={selectedVideo ? "lg:col-span-1" : "lg:col-span-3"}>
          <Tabs value={activeTab} onValueChange={setActiveTab} className="w-full">
            <TabsList className="grid w-full grid-cols-3">
              <TabsTrigger value="search" className="rounded-lg">
                Search
              </TabsTrigger>
              <TabsTrigger value="playlists" className="rounded-lg">
                Playlists
              </TabsTrigger>
              <TabsTrigger value="history" className="rounded-lg">
                History
              </TabsTrigger>
            </TabsList>

            <TabsContent value="search" className="mt-4">
              <div className="space-y-4">
                <h4 className="font-semibold text-sm text-muted-foreground">Search Results</h4>
                <div className="space-y-3">
                  {searchResults.map((video) => (
                    <Card
                      key={video.id}
                      className="cursor-pointer hover:shadow-md transition-shadow border hover:border-primary/30"
                      onClick={() => playVideo(video)}
                    >
                      <CardContent className="p-3">
                        <div className="flex gap-3">
                          <div className="relative flex-shrink-0">
                            <img
                              src={video.thumbnail || "/placeholder.svg"}
                              alt={video.title}
                              className="w-24 h-16 object-cover rounded"
                            />
                            <div className="absolute bottom-1 right-1 bg-black/80 text-white text-xs px-1 rounded">
                              {video.duration}
                            </div>
                          </div>
                          <div className="flex-1 min-w-0">
                            <h5 className="font-medium text-sm line-clamp-2 mb-1">{video.title}</h5>
                            <p className="text-xs text-muted-foreground">{video.channel}</p>
                            <p className="text-xs text-muted-foreground">{video.views}</p>
                          </div>
                        </div>
                      </CardContent>
                    </Card>
                  ))}
                </div>
              </div>
            </TabsContent>

            <TabsContent value="playlists" className="mt-4">
              <div className="space-y-4">
                <div className="flex items-center justify-between">
                  <h4 className="font-semibold text-sm text-muted-foreground">Your Playlists</h4>
                  <Button size="sm" variant="outline" className="rounded-lg bg-transparent">
                    <List className="h-4 w-4 mr-2" />
                    Create
                  </Button>
                </div>
                <div className="space-y-3">
                  {playlists.map((playlist) => (
                    <Card key={playlist.id} className="hover:shadow-md transition-shadow">
                      <CardContent className="p-4">
                        <div className="flex items-center justify-between mb-2">
                          <h5 className="font-medium">{playlist.name}</h5>
                          {playlist.autoGenerated && (
                            <Badge variant="secondary" className="text-xs">
                              <Sparkles className="h-3 w-3 mr-1" />
                              AI Generated
                            </Badge>
                          )}
                        </div>
                        <p className="text-sm text-muted-foreground mb-3">{playlist.videos.length} videos</p>
                        <div className="space-y-2">
                          {playlist.videos.slice(0, 2).map((video) => (
                            <div
                              key={video.id}
                              className="flex items-center gap-2 text-sm cursor-pointer hover:text-primary"
                              onClick={() => playVideo(video)}
                            >
                              <Play className="h-3 w-3" />
                              <span className="truncate">{video.title}</span>
                            </div>
                          ))}
                        </div>
                      </CardContent>
                    </Card>
                  ))}
                </div>
              </div>
            </TabsContent>

            <TabsContent value="history" className="mt-4">
              <div className="space-y-4">
                <h4 className="font-semibold text-sm text-muted-foreground">Watch History</h4>
                <div className="space-y-3">
                  {searchResults.slice(0, 2).map((video) => (
                    <Card
                      key={video.id}
                      className="cursor-pointer hover:shadow-md transition-shadow"
                      onClick={() => playVideo(video)}
                    >
                      <CardContent className="p-3">
                        <div className="flex items-center gap-3">
                          <Clock className="h-4 w-4 text-muted-foreground" />
                          <div className="flex-1">
                            <h5 className="font-medium text-sm line-clamp-1">{video.title}</h5>
                            <p className="text-xs text-muted-foreground">{video.channel}</p>
                          </div>
                        </div>
                      </CardContent>
                    </Card>
                  ))}
                </div>
              </div>
            </TabsContent>
          </Tabs>
        </div>
      </div>
    </div>
  )
}
